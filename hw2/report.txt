Programming functions
1. main()
    - parsing input command using `flag`.
    - read from a pcap file, or capture live packets.
    - set BPF filter if specified
    - process and output packets
2. read()
    - if '-r' is specified, read pcap file, otherwise, capture live packets either by '-i' or the first interface
    returned by `pcap.FindAllDevs()`
3. processPackets()
    - support packets that are of IPv4 and Ethernet only.
    - retrieve and decode different layers through `gopacket.NewDecodingLayerParser`
    - if `-s` is specified, check payload through `eth.Payload` by byte comparing.
    - packet length is retrieve through packet header by byte.
    - ip message will not be printed for ARP packets.
    - print `eth.payload` through `hex.Dump` in the end if payload is not empty.


Example output of some arguments
1. -h
Usage of /private/var/folders/2n/z6kkf2v94cjgtcd5cntyp_8r0000gn/T/___go_build_mydump_go:
  -i string
        Live capture from the network device <interface> (e.g., eth0). If not specified, mydump should automatically select a default interface to listen on. Capture should continue indefinitely until the user terminates the program.
  -r string
        Read packets from <file> in tcpdump format
  -s string
        Keep only packets that contain <string> in their payload (after any BPF filter is applied). You are not required to implement wildcard or regular expression matching. A simple string matching operation should suffice.
<expression> is a BPF filter that specifies which packets will be dumped. If no filter is given, all packets seen on the interface (or contained in the trace) should be dumped. Otherwise, only packets matching <expression> should be dumped.

2. -r hw1.pcap port 80
2013-01-13 03:30:48.832497 c4:3d:c7:17:6f:9b -> 00:0c:29:e9:94:8e type 0x800 len 74
92.240.68.152:9485 -> 192.168.0.200:80 TCP SYN
00000000  45 00 00 3c a3 d8 40 00  37 06 3c eb 5c f0 44 98  |E..<..@.7.<.\.D.|
00000010  c0 a8 00 c8 25 0d 00 50  ef 75 98 2a 00 00 00 00  |....%..P.u.*....|
00000020  a0 02 16 d0 d0 64 00 00  02 04 05 b4 04 02 08 0a  |.....d..........|
00000030  11 e8 3e eb 00 00 00 00  01 03 03 09              |..>.........|

3. -r hw1.pcap -s HTTP
2013-01-12 16:38:02.227995 c4:3d:c7:17:6f:9b -> 01:00:5e:7f:ff:fa type 0x800 len 342
192.168.0.1:1901 -> 239.255.255.250:1900 UDP
00000000  45 00 01 48 de ad 00 00  04 11 26 54 c0 a8 00 01  |E..H......&T....|
00000010  ef ff ff fa 07 6d 07 6c  01 34 bf 5d 4e 4f 54 49  |.....m.l.4.]NOTI|
00000020  46 59 20 2a 20 48 54 54  50 2f 31 2e 31 0d 0a 48  |FY * HTTP/1.1..H|
00000030  4f 53 54 3a 20 32 33 39  2e 32 35 35 2e 32 35 35  |OST: 239.255.255|
00000040  2e 32 35 30 3a 31 39 30  30 0d 0a 43 61 63 68 65  |.250:1900..Cache|
00000050  2d 43 6f 6e 74 72 6f 6c  3a 20 6d 61 78 2d 61 67  |-Control: max-ag|
00000060  65 3d 33 36 30 30 0d 0a  4c 6f 63 61 74 69 6f 6e  |e=3600..Location|
00000070  3a 20 68 74 74 70 3a 2f  2f 31 39 32 2e 31 36 38  |: http://192.168|
00000080  2e 30 2e 31 3a 38 30 2f  52 6f 6f 74 44 65 76 69  |.0.1:80/RootDevi|
00000090  63 65 2e 78 6d 6c 0d 0a  4e 54 3a 20 75 75 69 64  |ce.xml..NT: uuid|
000000a0  3a 75 70 6e 70 2d 49 6e  74 65 72 6e 65 74 47 61  |:upnp-InternetGa|
000000b0  74 65 77 61 79 44 65 76  69 63 65 2d 31 5f 30 2d  |tewayDevice-1_0-|
000000c0  63 34 33 64 63 37 31 37  36 66 39 62 0d 0a 55 53  |c43dc7176f9b..US|
000000d0  4e 3a 20 75 75 69 64 3a  75 70 6e 70 2d 49 6e 74  |N: uuid:upnp-Int|
000000e0  65 72 6e 65 74 47 61 74  65 77 61 79 44 65 76 69  |ernetGatewayDevi|
000000f0  63 65 2d 31 5f 30 2d 63  34 33 64 63 37 31 37 36  |ce-1_0-c43dc7176|
00000100  66 39 62 0d 0a 4e 54 53  3a 20 73 73 64 70 3a 61  |f9b..NTS: ssdp:a|
00000110  6c 69 76 65 0d 0a 53 65  72 76 65 72 3a 20 55 50  |live..Server: UP|
00000120  6e 50 2f 31 2e 30 20 55  50 6e 50 2f 31 2e 30 20  |nP/1.0 UPnP/1.0 |
00000130  55 50 6e 50 2d 44 65 76  69 63 65 2d 48 6f 73 74  |UPnP-Device-Host|
00000140  2f 31 2e 30 0d 0a 0d 0a                           |/1.0....|